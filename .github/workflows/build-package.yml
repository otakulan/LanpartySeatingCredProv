name: build package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'release version'
        default: "latest"
        required: true
      skip-publish:
        description: 'Skip publishing'
        required: true
        type: boolean
        default: false
      dry-run:
        description: 'Dry run (simulate)'
        required: true
        type: boolean
        default: true
  schedule:
    - cron: '32 5 * * 1' # 05:32 AM UTC every Monday

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-22.04
    outputs:
      package-env: ${{ steps.info.outputs.package-env }}
      package-version: ${{ steps.info.outputs.package-version }}
      skip-publish: ${{ steps.info.outputs.skip-publish }}
      dry-run: ${{ steps.info.outputs.dry-run }}

    steps:
      - name: Package information
        id: info
        shell: pwsh
        run: |
          $IsMasterBranch = ('${{ github.ref_name }}' -eq 'master')
          $IsScheduledJob = ('${{ github.event_name }}' -eq 'schedule')

          try { $SkipPublish = [System.Boolean]::Parse('${{ inputs.skip-publish }}') } catch { $SkipPublish = $false }
          try { $DryRun = [System.Boolean]::Parse('${{ inputs.dry-run }}') } catch { $DryRun = $true }

          $PackageEnv = if ($IsMasterBranch -And -Not $IsScheduledJob) {
            "publish-prod"
          } else {
            "publish-test"
          }
          
          if (-Not $IsMasterBranch) {
            $DryRun = $true # force dry run when not on master branch
          }
          if ($IsScheduledJob) {
            $DryRun = $true # force dry run for scheduled runs
          }

          $PackageVersion = '${{ inputs.version }}'
          if ([string]::IsNullOrEmpty($PackageVersion) -or $PackageVersion -eq 'latest') {
            $PackageVersion = (Get-Date -Format "yyyy.MM.dd") + ".0"
          }

          if ($PackageVersion -NotMatch '^\d+\.\d+\.\d+\.\d+$') {
            throw "invalid version format: $PackageVersion, expected: 1.2.3.4"
          }

          echo "package-env=$PackageEnv" >> $Env:GITHUB_OUTPUT
          echo "package-version=$PackageVersion" >> $Env:GITHUB_OUTPUT
          echo "skip-publish=$($SkipPublish.ToString().ToLower())" >> $Env:GITHUB_OUTPUT
          echo "dry-run=$($DryRun.ToString().ToLower())" >> $Env:GITHUB_OUTPUT

          echo "::notice::Version: $PackageVersion"
          echo "::notice::DryRun: $DryRun"

  build:
    name: Build library
    runs-on: windows-2022
    needs: [preflight]
    strategy:
      fail-fast: false

    steps:
      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v4

      - name: Configure runner
        shell: pwsh
        run: |
          Install-Module -Name VsDevShell -Force
          New-Item .\package -ItemType Directory -ErrorAction SilentlyContinue | Out-Null

      - name: Set package version
        shell: pwsh
        run: |
          $PackageVersion = '${{ needs.preflight.outputs.package-version }}'
          Set-Content -Path ".\VERSION" -Value $PackageVersion -Encoding UTF8

      - name: Build RdpCredProv
        shell: pwsh
        run: |
          foreach ($Arch in @('x64', 'arm64')) {
            $BuildDir = "build-$Arch"
            $PackageVersion = '${{ needs.preflight.outputs.package-version }}'
            $MsvcArch = @{"x86"="Win32";"x64"="x64";"arm64"="ARM64"}[$Arch]
            vcpkg install --triplet "$Arch-windows"
            cmake -G "Visual Studio 17 2022" -A $MsvcArch -B $BuildDir -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET="$Arch-windows"
            cmake --build $BuildDir --config Release
            Compress-Archive "$BuildDir\bin\Release\*" ".\package\RdpCredProv-$PackageVersion-$Arch.zip" -CompressionLevel Optimal
          }

      - name: Upload RdpCredProv
        uses: actions/upload-artifact@v4
        with:
          name: RdpCredProv-zip
          path: package/*.zip

  publish:
    name: Publish packages
    runs-on: ubuntu-22.04
    needs: [preflight, build]
    environment: ${{ needs.preflight.outputs.package-env }}
    if: ${{ fromJSON(needs.preflight.outputs.skip-publish) == false }}

    steps:
      - name: Download zip package
        uses: actions/download-artifact@v4
        with:
          name: RdpCredProv-zip
          path: package

      - name: Create GitHub release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: package
        run: |
          $PackageVersion = '${{ needs.preflight.outputs.package-version }}'
          $DryRun = [System.Boolean]::Parse('${{ needs.preflight.outputs.dry-run }}')

          $HashPath = 'checksums'
          $Files = Get-Item * | % { Get-FileHash -Algorithm SHA256 $_.FullName }
          $Files | % { "$($_.Hash)  $(Split-Path $_.Path -Leaf)" } | Out-File -FilePath $HashPath -Append -Encoding ASCII

          echo "::group::checksums"
          Get-Content $HashPath
          echo "::endgroup::"

          $ReleaseTag = "v$PackageVersion"
          $ReleaseTitle = "RdpCredProv v${PackageVersion}"
          $Repository = $Env:GITHUB_REPOSITORY

          if ($DryRun) {
            Write-Host "Dry Run: skipping GitHub release!"
          } else {
            & gh release create $ReleaseTag --repo $Repository --title $ReleaseTitle ./*
          }
